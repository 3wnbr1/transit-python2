#!/usr/bin/env python

import sys, os
from io import BytesIO
from StringIO import StringIO
import codecs

sys.path.append(os.path.abspath(os.path.dirname(__file__) + os.path.sep + os.path.pardir))

import transit.reader as treader
import transit.writer as twriter

transport = (len(sys.argv) > 1) and sys.argv[1].replace("-", "_") or "msgpack"
stdin = codecs.getreader("utf-8")(sys.stdin)
stdout = codecs.getwriter("utf-8")(sys.stdout)

def json_rw_loop():
    r = treader.Reader(protocol=transport)
    buff = u""
    while True:
        buff += stdin.read(1)
        if buff.endswith('\n'):
            s = StringIO(buff[:-1])
            o = r.read(s)
            ws = StringIO()
            w = twriter.Writer(ws, protocol=transport)
            w.write(o)
            result = ws.getvalue().strip()
            # Multiple values have commas between them.  Take them out.
            if result[0] == ",":
                result = result[1:]
            stdout.write(result)
            stdout.flush()
            buff = u""

def msgpack_rw_loop():
    r = treader.Reader(protocol=transport)
    w = twriter.Writer(sys.stdout, protocol=transport)
    u = r.unpacker
    while True:
        u.feed(sys.stdin.read(1))
        for o in r.readeach(sys.stdin):
            w.write(o)

if transport == "msgpack":
    msgpack_rw_loop()
else:
    json_rw_loop()


# If you want to use this with pipe, or interactively...
#while True:
#    line = sys.stdin.readline() # `for line in stdin` won't play nice in all situations
#    if line == '':
#        break
#    s = StringIO(line)
#    o = r.read(s)
#    w.write(o)
print ""

